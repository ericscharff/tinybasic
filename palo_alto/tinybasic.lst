0000                          ;*************************************************************
0000                          ;*
0000                          ;*                TINY BASIC FOR INTEL 8080
0000                          ;*                      VERSION 1.0
0000                          ;*                    BY LI-CHEN WANG
0000                          ;*                     10 JUNE, 1976
0000                          ;*                       @COPYLEFT
0000                          ;*                  ALL WRONGS RESERVED
0000                          ;*
0000                          ;*************************************************************
0000                          ;*
0000                          ;*  *** ZERO PAGE SUBROUTINES ***
0000                          ;*
0000                          ;* THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0000                          ;* MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0000                          ;* THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0000                          ;* THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0000                          ;* USE RST 0 AS START OR RESTART AND RST 1 THROUGH RST 7 FOR
0000                          ;* THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0000                          ;* TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0000                          ;* SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0000                          ;*
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                QT:       EQU   27H   
0000                CNTLO:    EQU   0FH   
0000                CNTLC:    EQU   03H   
0000                DLLN:     EQU   7DH   
0000                CNTLU:    EQU   15H   
0000                BKS:      EQU   5CH   
0000                BKA:      EQU   5FH   
0000                UPA:      EQU   5EH   
0000                DEL:      EQU   7FH   
0000                          ; 
0000                          ; MACRO TO CREATE TABLE ADDRESS ITEMS
0000                          ; 
0000                          ; 
0000                          .ORG   0000H   
0000   F3           START:    DI   ;*** START/RESTART ***
0001   31 00 14               LXI   SP,STACK   ;INITIALIZE THE STACK
0004   C3 BA 00               JMP   ST1   ;GO TO THE MAIN SECTION
0007   4C                     DB   'L'   
0008                          ; 
0008   E3                     XTHL   ;*** TSTC OR RST 1 ***
0009   EF                     RST   5   ;IGNORE BLANKS AND
000A   BE                     CMP   M   ;TEST CHARACTER
000B   C3 68 00               JMP   TC1   ;REST OF THIS IS AT TC1
000E                          ; 
000E   3E 0D        CRLF:     MVI   A,CR   ;*** CRLF ***
0010                          ; 
0010   F5                     PUSH   PSW   ;*** OUTC OR RST 2 ***
0011   3A 00 10               LDA   OCSW   ;PRINT CHARACTER ONLY
0014   B7                     ORA   A   ;IF OCSW SWITCH IS ON
0015   C3 1A 07               JMP   OC2   ;REST OF THIS IS AT OC2
0018                          ; 
0018   CD 55 04               CALL   EXPR2   ;*** EXPR OR RST 3 ***
001B   E5                     PUSH   H   ;EVALUATE AN EXPRESSION
001C   C3 11 04               JMP   EXPR1   ;REST OF IT AT EXPR1
001F   57                     DB   'W'   
0020                          ; 
0020   7C                     MOV   A,H   ;*** COMP OR RST 4 ***
0021   BA                     CMP   D   ;COMPARE HL WITH DE
0022   C0                     RNZ   ;RETURN CORRECT C AND
0023   7D                     MOV   A,L   ;Z FLAGS
0024   BB                     CMP   E   ;BUT OLD A IS LOST
0025   C9                     RET   
0026   41 4E                  DB   'AN'   
0028                          ; 
0028   1A           SS1:      LDAX   D   ;*** IGNBLK/RST 5 ***
0029   FE 20                  CPI   ' '   ;IGNORE BLANKS
002B   C0                     RNZ   ;IN TEXT (WHERE DE->)
002C   13                     INX   D   ;AND RETURN THE FIRST
002D   C3 28 00               JMP   SS1   ;NON-BLANK CHAR. IN A
0030                          ; 
0030   F1                     POP   PSW   ;*** FINISH/RST 6 ***
0031   CD 91 05               CALL   FIN   ;CHECK END OF COMMAND
0034   C3 A4 05               JMP   QWHAT   ;PRINT "WHAT?" IF WRONG
0037   47                     DB   'G'   
0038                          ; 
0038   EF                     RST   5   ;*** TSTV OR RST 7 ***
0039   D6 40                  SUI   '@'   ;TEST VARIABLES
003B   D8                     RC   ;C:NOT A VARIABLE
003C   C2 58 00               JNZ   TV1   ;NOT "@" ARRAY
003F   13                     INX   D   ;IT IS THE "@" ARRAY
0040   CD FB 04               CALL   PARN   ;@ SHOULD BE FOLLOWED
0043   29                     DAD   H   ;BY (EXPR) AS ITS INDEX
0044   DA 9F 00               JC   QHOW   ;IS INDEX TOO BIG?
0047   D5                     PUSH   D   ;WILL IT OVERWRITE
0048   EB                     XCHG   ;TEXT?
0049   CD 3D 05               CALL   SIZE   ;FIND SIZE OF FREE
004C   E7                     RST   4   ;AND CHECK THAT
004D   DA D0 05               JC   ASORRY   ;IF SO, SAY "SORRY"
0050   21 00 13               LXI   H,VARBGN   ;IF NOT GET ADDRESS
0053   CD 60 05               CALL   SUBDE   ;OF @(EXPR) AND PUT IT
0056   D1                     POP   D   ;IN HL
0057   C9                     RET   ;C FLAG IS CLEARED
0058   FE 1B        TV1:      CPI   27   ;NOT @, IS IT A TO Z?
005A   3F                     CMC   ;IF NOT RETURN C FLAG
005B   D8                     RC   
005C   13                     INX   D   ;IF A THROUGH Z
005D   21 00 13               LXI   H,VARBGN   ;COMPUTE ADDRESS OF
0060   07                     RLC   ;THAT VARIABLE
0061   85                     ADD   L   ;AND RETURN IT IN HL
0062   6F                     MOV   L,A   ;WITH C FLAG CLEARED
0063   3E 00                  MVI   A,0   
0065   8C                     ADC   H   
0066   67                     MOV   H,A   
0067   C9                     RET   
0068                          ; 
0068                          ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
0068                          ;       RST  5                          ;THIS IS AT LOC. 8
0068                          ;       CMP  M                          ;AND THEN JUMP HERE
0068   23           TC1:      INX   H   ;COMPARE THE BYTE THAT
0069   CA 73 00               JZ   TC2   ;FOLLOWS THE RST INST.
006C   C5                     PUSH   B   ;WITH THE TEXT (DE->)
006D   4E                     MOV   C,M   ;IF NOT =, ADD THE 2ND
006E   06 00                  MVI   B,0   ;BYTE THAT FOLLOWS THE
0070   09                     DAD   B   ;RST TO THE OLD PC
0071   C1                     POP   B   ;I.E., DO A RELATIVE
0072   1B                     DCX   D   ;JUMP IF NOT =
0073   13           TC2:      INX   D   ;IF =, SKIP THOSE BYTES
0074   23                     INX   H   ;AND CONTINUE
0075   E3                     XTHL   
0076   C9                     RET   
0077                          ; 
0077   21 00 00     TSTNUM:   LXI   H,0   ;*** TSTNUM ***
007A   44                     MOV   B,H   ;TEST IF THE TEXT IS
007B   EF                     RST   5   ;A NUMBER
007C   FE 30        TN1:      CPI   '0'   ;IF NOT, RETURN 0 IN
007E   D8                     RC   ;B AND HL
007F   FE 3A                  CPI   3AH   ;IF NUMBERS, CONVERT
0081   D0                     RNC   ;TO BINARY IN HL AND
0082   3E F0                  MVI   A,0F0H   ;SET B TO # OF DIGITS
0084   A4                     ANA   H   ;IF H>255, THERE IS NO
0085   C2 9F 00               JNZ   QHOW   ;ROOM FOR NEXT DIGIT
0088   04                     INR   B   ;B COUNTS # OF DIGITS
0089   C5                     PUSH   B   
008A   44                     MOV   B,H   ;HL=10*HL+(NEW DIGIT)
008B   4D                     MOV   C,L   
008C   29                     DAD   H   ;WHERE 10* IS DONE BY
008D   29                     DAD   H   ;SHIFT AND ADD
008E   09                     DAD   B   
008F   29                     DAD   H   
0090   1A                     LDAX   D   ;AND (DIGIT) IS FROM
0091   13                     INX   D   ;STRIPPING THE ASCII
0092   E6 0F                  ANI   0FH   ;CODE
0094   85                     ADD   L   
0095   6F                     MOV   L,A   
0096   3E 00                  MVI   A,0   
0098   8C                     ADC   H   
0099   67                     MOV   H,A   
009A   C1                     POP   B   
009B   1A                     LDAX   D   ;DO THIS DIGIT AFTER
009C   F2 7C 00               JP   TN1   ;DIGIT. S SAYS OVERFLOW
009F   D5           QHOW:     PUSH   D   ;*** ERROR "HOW?" ***
00A0   11 A6 00     AHOW:     LXI   D,HOW   
00A3   C3 A8 05               JMP   ERROR   
00A6   48 4F 57 3F 0D HOW:    DB   'HOW?',CR   
00AB   4F 4B 0D     OK:       DB   'OK',CR   
00AE   57 48 41 54 3F 0D WHAT:   DB   'WHAT?',CR   
00B4   53 4F 52 52 59 0D SORRY:   DB   'SORRY',CR   
00BA                          ; 
00BA                          ;*************************************************************
00BA                          ;*
00BA                          ;* *** MAIN ***
00BA                          ;*
00BA                          ;* THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
00BA                          ;* AND STORES IT IN THE MEMORY.
00BA                          ;*
00BA                          ;* AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
00BA                          ;* STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
00BA                          ;* ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
00BA                          ;* NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
00BA                          ;* (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
00BA                          ;* IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
00BA                          ;* NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
00BA                          ;* THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
00BA                          ;* AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
00BA                          ;*
00BA                          ;* AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
00BA                          ;* LOOPS BACK AND ASK FOR ANOTHER LINE.  THIS LOOP WILL BE
00BA                          ;* TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
00BA                          ;* NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
00BA                          ;*
00BA                          ;* TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
00BA                          ;* LABELED "TXTBGN" AND ENDED AT "TXTEND".  WE ALWAYS FILL THIS
00BA                          ;* AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
00BA                          ;* BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
00BA                          ;*
00BA                          ;* THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
00BA                          ;* THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
00BA                          ;* THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
00BA                          ;* (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
00BA                          ;*
00BA                          ;START: LXI  SP,STACK                   ;THIS IS AT LOC. 0
00BA   CD 0E 00     ST1:      CALL   CRLF   ;AND JUMP TO HERE
00BD   11 AB 00               LXI   D,OK   ;DE->STRING
00C0   97                     SUB   A   ;A=0
00C1   CD 3C 06               CALL   PRTSTG   ;PRINT STRING UNTIL CR
00C4   21 CB 00               LXI   H,ST2+1   ;LITERAL 0
00C7   22 01 10               SHLD   CURRNT   ;CURRENT->LINE # = 0
00CA   21 00 00     ST2:      LXI   H,0   
00CD   22 07 10               SHLD   LOPVAR   
00D0   22 03 10               SHLD   STKGOS   
00D3   3E 3E        ST3:      MVI   A,'>'   ;PROMPT '>' AND
00D5   CD D6 05               CALL   GETLN   ;READ A LINE
00D8   D5                     PUSH   D   ;DE->END OF LINE
00D9   11 37 13               LXI   D,BUFFER   ;DE->BEGINNING OF LINE
00DC   CD 77 00               CALL   TSTNUM   ;TEST IF IT IS A NUMBER
00DF   EF                     RST   5   
00E0   7C                     MOV   A,H   ;HL=VALUE OF THE # OR
00E1   B5                     ORA   L   ;0 IF NO # WAS FOUND
00E2   C1                     POP   B   ;BC->END OF LINE
00E3   CA F5 01               JZ   DIRECT   
00E6   1B                     DCX   D   ;BACKUP DE AND SAVE
00E7   7C                     MOV   A,H   ;VALUE OF LINE # THERE
00E8   12                     STAX   D   
00E9   1B                     DCX   D   
00EA   7D                     MOV   A,L   
00EB   12                     STAX   D   
00EC   C5                     PUSH   B   ;BC,DE->BEGIN, END
00ED   D5                     PUSH   D   
00EE   79                     MOV   A,C   
00EF   93                     SUB   E   
00F0   F5                     PUSH   PSW   ;A=# OF BYTES IN LINE
00F1   CD 14 06               CALL   FNDLN   ;FIND THIS LINE IN SAVE
00F4   D5                     PUSH   D   ;AREA, DE->SAVE AREA
00F5   C2 08 01               JNZ   ST4   ;NZ:NOT FOUND, INSERT
00F8   D5                     PUSH   D   ;Z:FOUND, DELETE IT
00F9   CD 30 06               CALL   FNDNXT   ;FIND NEXT LINE
00FC                          ;DE->NEXT LINE
00FC   C1                     POP   B   ;BC->LINE TO BE DELETED
00FD   2A 13 10               LHLD   TXTUNF   ;HL->UNFILLED SAVE AREA
0100   CD BD 06               CALL   MVUP   ;MOVE UP TO DELETE
0103   60                     MOV   H,B   ;TXTUNF->UNFILLED AREA
0104   69                     MOV   L,C   
0105   22 13 10               SHLD   TXTUNF   ;UPDATE
0108   C1           ST4:      POP   B   ;GET READY TO INSERT
0109   2A 13 10               LHLD   TXTUNF   ;BUT FIRST CHECK IF
010C   F1                     POP   PSW   ;THE LENGTH OF NEW LINE
010D   E5                     PUSH   H   ;IS 3 (LINE # AND CR)
010E   FE 03                  CPI   3   ;THEN DO NOT INSERT
0110   CA 00 00               JZ   START   ;MUST CLEAR THE STACK
0113   85                     ADD   L   ;COMPUTE NEW TXTUNF
0114   6F                     MOV   L,A   
0115   3E 00                  MVI   A,0   
0117   8C                     ADC   H   
0118   67                     MOV   H,A   ;HL->NEW UNFILLED AREA
0119   11 00 13               LXI   D,TXTEND   ;CHECK TO SEE IF THERE
011C   E7                     RST   4   ;IS ENOUGH SPACE
011D   D2 CF 05               JNC   QSORRY   ;SORRY, NO ROOM FOR IT
0120   22 13 10               SHLD   TXTUNF   ;OK, UPDATE TXTUNF
0123   D1                     POP   D   ;DE->OLD UNFILLED AREA
0124   CD C6 06               CALL   MVDOWN   
0127   D1                     POP   D   ;DE->BEGIN, HL->END
0128   E1                     POP   H   
0129   CD BD 06               CALL   MVUP   ;MOVE NEW LINE TO SAVE
012C   C3 D3 00               JMP   ST3   ;AREA
012F                          ; 
012F                          ;*************************************************************
012F                          ;*
012F                          ;* *** TABLES *** DIRECT *** & EXEC ***
012F                          ;*
012F                          ;* THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
012F                          ;* WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
012F                          ;* OF CODE ACCORDING TO THE TABLE.
012F                          ;*
012F                          ;* AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
012F                          ;* TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
012F                          ;* HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
012F                          ;* ALL DIRECT AND STATEMENT COMMANDS.
012F                          ;*
012F                          ;* A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
012F                          ;* MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
012F                          ;* 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
012F                          ;*
012F                          ;* THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
012F                          ;* IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
012F                          ;* A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
012F                          ;* BYTE SET TO 1.
012F                          ;*
012F                          ;* END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
012F                          ;* STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
012F                          ;* MATCH THIS NULL ITEM AS DEFAULT.
012F                          ;*
012F                TAB1:     EQU   $   
012F   4C 49 53 54            DB   'LIST'   
        **MACRO UNROLL - ITEM
0133   82 DB   >LIST + 0x80   
0134   61                     DB   <LIST   
0135   52 55 4E               DB   'RUN'   
        **MACRO UNROLL - ITEM
0138   82 DB   >RUN + 0x80   
0139   33                     DB   <RUN   
013A   4E 45 57               DB   'NEW'   
        **MACRO UNROLL - ITEM
013D   82 DB   >NEW + 0x80   
013E   26                     DB   <NEW   
013F                TAB2:     EQU   $   
013F   4E 45 58 54            DB   'NEXT'   
        **MACRO UNROLL - ITEM
0143   83 DB   >NEXT + 0x80   
0144   49                     DB   <NEXT   
0145   4C 45 54               DB   'LET'   
        **MACRO UNROLL - ITEM
0148   84 DB   >LET + 0x80   
0149   07                     DB   <LET   
014A   49 46                  DB   'IF'   
        **MACRO UNROLL - ITEM
014C   83 DB   >IFF + 0x80   
014D   9A                     DB   <IFF   
014E   47 4F 54 4F            DB   'GOTO'   
        **MACRO UNROLL - ITEM
0152   82 DB   >GOTO + 0x80   
0153   52                     DB   <GOTO   
0154   47 4F 53 55 42         DB   'GOSUB'   
        **MACRO UNROLL - ITEM
0159   82 DB   >GOSUB + 0x80   
015A   B1                     DB   <GOSUB   
015B   52 45 54 55 52 4E      DB   'RETURN'   
        **MACRO UNROLL - ITEM
0161   82 DB   >RETURN + 0x80   
0162   D1                     DB   <RETURN   
0163   52 45 4D               DB   'REM'   
        **MACRO UNROLL - ITEM
0166   83 DB   >REM + 0x80   
0167   96                     DB   <REM   
0168   46 4F 52               DB   'FOR'   
        **MACRO UNROLL - ITEM
016B   82 DB   >FOR + 0x80   
016C   EA                     DB   <FOR   
016D   49 4E 50 55 54         DB   'INPUT'   
        **MACRO UNROLL - ITEM
0172   83 DB   >INPUT + 0x80   
0173   B1                     DB   <INPUT   
0174   50 52 49 4E 54         DB   'PRINT'   
        **MACRO UNROLL - ITEM
0179   82 DB   >PRINT + 0x80   
017A   79                     DB   <PRINT   
017B   53 54 4F 50            DB   'STOP'   
        **MACRO UNROLL - ITEM
017F   82 DB   >STOP + 0x80   
0180   2F                     DB   <STOP   
        **MACRO UNROLL - ITEM
0181   84 DB   >DEFLT + 0x80   
0182   01                     DB   <DEFLT   
0183   59 4F 55 20 4D 41 59 20 49 4E 53 45 52 54 20 20 4D 4F 52 45 20 43 4F 4D 4D 41 4E 44 53 2E DB   'YOU MAY INSERT  MORE COMMANDS.'   
01A1                TAB4:     EQU   $   
01A1   52 4E 44               DB   'RND'   
        **MACRO UNROLL - ITEM
01A4   85 DB   >RND + 0x80   
01A5   06                     DB   <RND   
01A6   41 42 53               DB   'ABS'   
        **MACRO UNROLL - ITEM
01A9   85 DB   >ABS + 0x80   
01AA   31                     DB   <ABS   
01AB   53 49 5A 45            DB   'SIZE'   
        **MACRO UNROLL - ITEM
01AF   85 DB   >SIZE + 0x80   
01B0   3D                     DB   <SIZE   
        **MACRO UNROLL - ITEM
01B1   84 DB   >XP40 + 0x80   
01B2   EC                     DB   <XP40   
01B3   59 4F 55 20 4D 41 59 20 49 4E 53 45 52 54 20 20 4D 4F 52 45 20 46 55 4E 43 54 49 4F 4E 53 DB   'YOU MAY INSERT  MORE FUNCTIONS'   
01D1                TAB5:     EQU   $   
01D1   54 4F                  DB   'TO'   
        **MACRO UNROLL - ITEM
01D3   82 DB   >FR1 + 0x80   
01D4   FA                     DB   <FR1   
        **MACRO UNROLL - ITEM
01D5   85 DB   >QWHAT + 0x80   
01D6   A4                     DB   <QWHAT   
01D7                TAB6:     EQU   $   
01D7   53 54 45 50            DB   'STEP'   
        **MACRO UNROLL - ITEM
01DB   83 DB   >FR2 + 0x80   
01DC   04                     DB   <FR2   
        **MACRO UNROLL - ITEM
01DD   83 DB   >FR3 + 0x80   
01DE   08                     DB   <FR3   
01DF                TAB8:     EQU   $   
01DF   3E 3D                  DB   '>='   
        **MACRO UNROLL - ITEM
01E1   84 DB   >XP11 + 0x80   
01E2   17                     DB   <XP11   
01E3   23                     DB   '#'   
        **MACRO UNROLL - ITEM
01E4   84 DB   >XP12 + 0x80   
01E5   1D                     DB   <XP12   
01E6   3E                     DB   '>'   
        **MACRO UNROLL - ITEM
01E7   84 DB   >XP13 + 0x80   
01E8   23                     DB   <XP13   
01E9   3D                     DB   '='   
        **MACRO UNROLL - ITEM
01EA   84 DB   >XP15 + 0x80   
01EB   32                     DB   <XP15   
01EC   3C 3D                  DB   '<='   
        **MACRO UNROLL - ITEM
01EE   84 DB   >XP14 + 0x80   
01EF   2A                     DB   <XP14   
01F0   3C                     DB   '<'   
        **MACRO UNROLL - ITEM
01F1   84 DB   >XP16 + 0x80   
01F2   38                     DB   <XP16   
        **MACRO UNROLL - ITEM
01F3   84 DB   >XP17 + 0x80   
01F4   3E                     DB   <XP17   
01F5                          ; 
01F5   21 2E 01     DIRECT:   LXI   H,TAB1-1   ;*** DIRECT ***
01F8                          ; 
01F8                EXEC:     EQU   $   
01F8   EF           EX0:      RST   5   ;IGNORE LEADING BLANKS
01F9   D5                     PUSH   D   ;SAVE POINTER
01FA   1A           EX1:      LDAX   D   ;IF FOUND '.' IN STRING
01FB   13                     INX   D   ;BEFORE ANY MISMATCH
01FC   FE 2E                  CPI   '.'   ;WE DECLARE A MATCH
01FE   CA 17 02               JZ   EX3   
0201   23                     INX   H   ;HL->TABLE
0202   BE                     CMP   M   ;IF MATCH, TEST NEXT
0203   CA FA 01               JZ   EX1   
0206   3E 7F                  MVI   A,7FH   ;ELSE SEE IF BIT 7
0208   1B                     DCX   D   ;OF TABLE IS SET, WHICH
0209   BE                     CMP   M   ;IS THE JUMP ADDR. (HI)
020A   DA 1E 02               JC   EX5   ;C:YES, MATCHED
020D   23           EX2:      INX   H   ;NC:NO, FIND JUMP ADDR.
020E   BE                     CMP   M   
020F   D2 0D 02               JNC   EX2   
0212   23                     INX   H   ;BUMP TO NEXT TAB. ITEM
0213   D1                     POP   D   ;RESTORE STRING POINTER
0214   C3 F8 01               JMP   EX0   ;TEST AGAINST NEXT ITEM
0217   3E 7F        EX3:      MVI   A,7FH   ;PARTIAL MATCH, FIND
0219   23           EX4:      INX   H   ;JUMP ADDR., WHICH IS
021A   BE                     CMP   M   ;FLAGGED BY BIT 7
021B   D2 19 02               JNC   EX4   
021E   7E           EX5:      MOV   A,M   ;LOAD HL WITH THE JUMP
021F   23                     INX   H   ;ADDRESS FROM THE TABLE
0220   6E                     MOV   L,M   
0221   E6 7F                  ANI   07FH   ;MASK OFF BIT 7
0223   67                     MOV   H,A   
0224   F1                     POP   PSW   ;CLEAN UP THE GABAGE
0225   E9                     PCHL   ;AND WE GO DO IT
0226                          ; 
0226                          ;*************************************************************
0226                          ;*
0226                          ;* WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0226                          ;* COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0226                          ;* COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0226                          ;* SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0226                          ;* TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0226                          ;*
0226                          ;* FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'START'
0226                          ;* FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0226                          ;* GO BACK TO 'START'.
0226                          ;* FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0226                          ;* FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0226                          ;* FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'START', ELSE
0226                          ;* GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0226                          ;*************************************************************
0226                          ;*
0226                          ;* *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0226                          ;*
0226                          ;* 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0226                          ;*
0226                          ;* 'STOP(CR)' GOES BACK TO 'START'
0226                          ;*
0226                          ;* 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0226                          ;* 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0226                          ;* COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0226                          ;*
0226                          ;* THERE ARE 3 MORE ENTRIES IN 'RUN':
0226                          ;* 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0226                          ;* 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0226                          ;* 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0226                          ;*
0226                          ;* 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0226                          ;* LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0226                          ;*
0226   CD A0 05     NEW:      CALL   ENDCHK   ;*** NEW(CR) ***
0229   21 15 10               LXI   H,TXTBGN   
022C   22 13 10               SHLD   TXTUNF   
022F                          ; 
022F   CD A0 05     STOP:     CALL   ENDCHK   ;*** STOP(CR) ***
0232   C7                     RST   0   
0233                          ; 
0233   CD A0 05     RUN:      CALL   ENDCHK   ;*** RUN(CR) ***
0236   11 15 10               LXI   D,TXTBGN   ;FIRST SAVED LINE
0239                          ; 
0239   21 00 00     RUNNXL:   LXI   H,0   ;*** RUNNXL ***
023C   CD 1C 06               CALL   FDLNP   ;FIND WHATEVER LINE #
023F   DA 00 00               JC   START   ;C:PASSED TXTUNF, QUIT
0242                          ; 
0242   EB           RUNTSL:   XCHG   ;*** RUNTSL ***
0243   22 01 10               SHLD   CURRNT   ;SET 'CURRENT'->LINE #
0246   EB                     XCHG   
0247   13                     INX   D   ;BUMP PASS LINE #
0248   13                     INX   D   
0249                          ; 
0249   CD 32 07     RUNSML:   CALL   CHKIO   ;*** RUNSML ***
024C   21 3E 01               LXI   H,TAB2-1   ;FIND COMMAND IN TAB2
024F   C3 F8 01               JMP   EXEC   ;AND EXECUTE IT
0252                          ; 
0252   DF           GOTO:     RST   3   ;*** GOTO EXPR ***
0253   D5                     PUSH   D   ;SAVE FOR ERROR ROUTINE
0254   CD A0 05               CALL   ENDCHK   ;MUST FIND A CR
0257   CD 14 06               CALL   FNDLN   ;FIND THE TARGET LINE
025A   C2 A0 00               JNZ   AHOW   ;NO SUCH LINE #
025D   F1                     POP   PSW   ;CLEAR THE PUSH DE
025E   C3 42 02               JMP   RUNTSL   ;GO DO IT
0261                          ; 
0261                          ;*************************************************************
0261                          ;*
0261                          ;* *** LIST *** & PRINT ***
0261                          ;*
0261                          ;* LIST HAS TWO FORMS:
0261                          ;* 'LIST(CR)' LISTS ALL SAVED LINES
0261                          ;* 'LIST #(CR)' START LIST AT THIS LINE #
0261                          ;* YOU CAN STOP THE LISTING BY CONTROL C KEY
0261                          ;*
0261                          ;* PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0261                          ;* WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0261                          ;* ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0261                          ;*
0261                          ;* A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0261                          ;* THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0261                          ;* BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0261                          ;* COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0261                          ;* SPECIFIED, 6 POSITIONS WILL BE USED.
0261                          ;*
0261                          ;* A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0261                          ;* DOUBLE QUOTES.
0261                          ;*
0261                          ;* A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
0261                          ;*
0261                          ;* A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0261                          ;* PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0261                          ;* ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0261                          ;*
0261   CD 77 00     LIST:     CALL   TSTNUM   ;TEST IF THERE IS A #
0264   CD A0 05               CALL   ENDCHK   ;IF NO # WE GET A 0
0267   CD 14 06               CALL   FNDLN   ;FIND THIS OR NEXT LINE
026A   DA 00 00     LS1:      JC   START   ;C:PASSED TXTUNF
026D   CD AA 06               CALL   PRTLN   ;PRINT THE LINE
0270   CD 32 07               CALL   CHKIO   ;STOP IF HIT CONTROL-C
0273   CD 1C 06               CALL   FDLNP   ;FIND NEXT LINE
0276   C3 6A 02               JMP   LS1   ;AND LOOP BACK
0279                          ; 
0279   0E 06        PRINT:    MVI   C,6   ;C = # OF SPACES
027B   CF                     RST   1   ;IF NULL LIST & ";"
027C   3B                     DB   ";"   
027D   06                     DB   PR2-$-1   
027E   CD 0E 00               CALL   CRLF   ;GIVE CR-LF AND
0281   C3 49 02               JMP   RUNSML   ;CONTINUE SAME LINE
0284   CF           PR2:      RST   1   ;IF NULL LIST (CR)
0285   0D                     DB   CR   
0286   06                     DB   PR0-$-1   
0287   CD 0E 00               CALL   CRLF   ;ALSO GIVE CR-LF AND
028A   C3 39 02               JMP   RUNNXL   ;GO TO NEXT LINE
028D   CF           PR0:      RST   1   ;ELSE IS IT FORMAT?
028E   23                     DB   '#'   
028F   05                     DB   PR1-$-1   
0290   DF                     RST   3   ;YES, EVALUATE EXPR.
0291   4D                     MOV   C,L   ;AND SAVE IT IN C
0292   C3 9B 02               JMP   PR3   ;LOOK FOR MORE TO PRINT
0295   CD 48 06     PR1:      CALL   QTSTG   ;OR IS IT A STRING?
0298   C3 A8 02               JMP   PR8   ;IF NOT, MUST BE EXPR.
029B   CF           PR3:      RST   1   ;IF ",", GO FIND NEXT
029C   2C                     DB   ","   
029D   06                     DB   PR6-$-1   
029E   CD 91 05               CALL   FIN   ;IN THE LIST.
02A1   C3 8D 02               JMP   PR0   ;LIST CONTINUES
02A4   CD 0E 00     PR6:      CALL   CRLF   ;LIST ENDS
02A7   F7                     RST   6   
02A8   DF           PR8:      RST   3   ;EVALUATE THE EXPR
02A9   C5                     PUSH   B   
02AA   CD 6E 06               CALL   PRTNUM   ;PRINT THE VALUE
02AD   C1                     POP   B   
02AE   C3 9B 02               JMP   PR3   ;MORE TO PRINT?
02B1                          ; 
02B1                          ;*************************************************************
02B1                          ;*
02B1                          ;* *** GOSUB *** & RETURN ***
02B1                          ;*
02B1                          ;* 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
02B1                          ;* COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
02B1                          ;* ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
02B1                          ;* SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
02B1                          ;* (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
02B1                          ;* THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
02B1                          ;* SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
02B1                          ;* IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
02B1                          ;* BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
02B1                          ;*
02B1                          ;* 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
02B1                          ;* RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
02B1                          ;* 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
02B1                          ;* NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
02B1                          ;*
02B1   CD F1 06     GOSUB:    CALL   PUSHA   ;SAVE THE CURRENT "FOR"
02B4   DF                     RST   3   ;PARAMETERS
02B5   D5                     PUSH   D   ;AND TEXT POINTER
02B6   CD 14 06               CALL   FNDLN   ;FIND THE TARGET LINE
02B9   C2 A0 00               JNZ   AHOW   ;NOT THERE. SAY "HOW?"
02BC   2A 01 10               LHLD   CURRNT   ;FOUND IT, SAVE OLD
02BF   E5                     PUSH   H   ;'CURRNT' OLD 'STKGOS'
02C0   2A 03 10               LHLD   STKGOS   
02C3   E5                     PUSH   H   
02C4   21 00 00               LXI   H,0   ;AND LOAD NEW ONES
02C7   22 07 10               SHLD   LOPVAR   
02CA   39                     DAD   SP   
02CB   22 03 10               SHLD   STKGOS   
02CE   C3 42 02               JMP   RUNTSL   ;THEN RUN THAT LINE
02D1   CD A0 05     RETURN:   CALL   ENDCHK   ;THERE MUST BE A CR
02D4   2A 03 10               LHLD   STKGOS   ;OLD STACK POINTER
02D7   7C                     MOV   A,H   ;0 MEANS NOT EXIST
02D8   B5                     ORA   L   
02D9   CA A4 05               JZ   QWHAT   ;SO, WE SAY: "WHAT?"
02DC   F9                     SPHL   ;ELSE, RESTORE IT
02DD   E1                     POP   H   
02DE   22 03 10               SHLD   STKGOS   ;AND THE OLD 'STKGOS'
02E1   E1                     POP   H   
02E2   22 01 10               SHLD   CURRNT   ;AND THE OLD 'CURRNT'
02E5   D1                     POP   D   ;OLD TEXT POINTER
02E6   CD D5 06               CALL   POPA   ;OLD "FOR" PARAMETERS
02E9   F7                     RST   6   ;AND WE ARE BACK HOME
02EA                          ; 
02EA                          ;*************************************************************
02EA                          ;*
02EA                          ;* *** FOR *** & NEXT ***
02EA                          ;*
02EA                          ;* 'FOR' HAS TWO FORMS:
02EA                          ;* 'FOR VAR=EXP1 TO EXP2 STEP EXP1' AND 'FOR VAR=EXP1 TO EXP2'
02EA                          ;* THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
02EA                          ;* EXP1=1.  (I.E., WITH A STEP OF +1.)
02EA                          ;* TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
02EA                          ;* CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXPR2 AND EXP1
02EA                          ;* AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
02EA                          ;* THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
02EA                          ;* 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
02EA                          ;* THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
02EA                          ;* 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
02EA                          ;* BEFORE THE NEW ONE OVERWRITES IT.
02EA                          ;* TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
02EA                          ;* VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
02EA                          ;* IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
02EA                          ;* (PURGED FROM THE STACK..)
02EA                          ;*
02EA                          ;* 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
02EA                          ;* END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
02EA                          ;* WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
02EA                          ;* THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
02EA                          ;* DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
02EA                          ;* THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
02EA                          ;* IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
02EA                          ;* FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
02EA                          ;* IS PURGED AND EXECUTION CONTINUES.
02EA                          ;*
02EA   CD F1 06     FOR:      CALL   PUSHA   ;SAVE THE OLD SAVE AREA
02ED   CD 7E 05               CALL   SETVAL   ;SET THE CONTROL VAR.
02F0   2B                     DCX   H   ;HL IS ITS ADDRESS
02F1   22 07 10               SHLD   LOPVAR   ;SAVE THAT
02F4   21 D0 01               LXI   H,TAB5-1   ;USE 'EXEC' TO LOOK
02F7   C3 F8 01               JMP   EXEC   ;FOR THE WORD 'TO'
02FA   DF           FR1:      RST   3   ;EVALUATE THE LIMIT
02FB   22 0B 10               SHLD   LOPLMT   ;SAVE THAT
02FE   21 D6 01               LXI   H,TAB6-1   ;USE 'EXEC' TO LOOK
0301   C3 F8 01               JMP   EXEC   ;FOR THE WORD 'STEP'
0304   DF           FR2:      RST   3   ;FOUND IT, GET STEP
0305   C3 0B 03               JMP   FR4   
0308   21 01 00     FR3:      LXI   H,1   ;NOT FOUND, SET TO 1
030B   22 09 10     FR4:      SHLD   LOPINC   ;SAVE THAT TOO
030E   2A 01 10     FR5:      LHLD   CURRNT   ;SAVE CURRENT LINE #
0311   22 0D 10               SHLD   LOPLN   
0314   EB                     XCHG   ;AND TEXT POINTER
0315   22 0F 10               SHLD   LOPPT   
0318   01 0A 00               LXI   B,10   ;DIG INTO STACK TO
031B   2A 07 10               LHLD   LOPVAR   ;FIND 'LOPVAR'
031E   EB                     XCHG   
031F   60                     MOV   H,B   
0320   68                     MOV   L,B   ;HL=0 NOW
0321   39                     DAD   SP   ;HERE IS THE STACK
0322   3E                     DB   3EH   
0323   09           FR7:      DAD   B   ;EACH LEVEL IS 10 DEEP
0324   7E                     MOV   A,M   ;GET THAT OLD 'LOPVAR'
0325   23                     INX   H   
0326   B6                     ORA   M   
0327   CA 44 03               JZ   FR8   ;0 SAYS NO MORE IN IT
032A   7E                     MOV   A,M   
032B   2B                     DCX   H   
032C   BA                     CMP   D   ;SAME AS THIS ONE?
032D   C2 23 03               JNZ   FR7   
0330   7E                     MOV   A,M   ;THE OTHER HALF?
0331   BB                     CMP   E   
0332   C2 23 03               JNZ   FR7   
0335   EB                     XCHG   ;YES, FOUND ONE
0336   21 00 00               LXI   H,0   
0339   39                     DAD   SP   ;TRY TO MOVE SP
033A   44                     MOV   B,H   
033B   4D                     MOV   C,L   
033C   21 0A 00               LXI   H,10   
033F   19                     DAD   D   
0340   CD C6 06               CALL   MVDOWN   ;AND PURGE 10 WORDS
0343   F9                     SPHL   ;IN THE STACK
0344   2A 0F 10     FR8:      LHLD   LOPPT   ;JOB DONE, RESTORE DE
0347   EB                     XCHG   
0348   F7                     RST   6   ;AND CONTINUE
0349                          ; 
0349   FF           NEXT:     RST   7   ;GET ADDRESS OF VAR.
034A   DA A4 05               JC   QWHAT   ;NO VARIABLE, "WHAT?"
034D   22 05 10               SHLD   VARNXT   ;YES, SAVE IT
0350   D5           NX0:      PUSH   D   ;SAVE TEXT POINTER
0351   EB                     XCHG   
0352   2A 07 10               LHLD   LOPVAR   ;GET VAR. IN 'FOR'
0355   7C                     MOV   A,H   
0356   B5                     ORA   L   ;0 SAYS NEVER HAD ONE
0357   CA A5 05               JZ   AWHAT   ;SO WE ASK: "WHAT?"
035A   E7                     RST   4   ;ELSE WE CHECK THEM
035B   CA 68 03               JZ   NX3   ;OK, THEY AGREE
035E   D1                     POP   D   ;NO, LET'S SEE
035F   CD D5 06               CALL   POPA   ;PURGE CURRENT LOOP
0362   2A 05 10               LHLD   VARNXT   ;AND POP ONE LEVEL
0365   C3 50 03               JMP   NX0   ;GO CHECK AGAIN
0368   5E           NX3:      MOV   E,M   ;COME HERE WHEN AGREED
0369   23                     INX   H   
036A   56                     MOV   D,M   ;DE=VALUE OF VAR.
036B   2A 09 10               LHLD   LOPINC   
036E   E5                     PUSH   H   
036F   19                     DAD   D   ;ADD ONE STEP
0370   EB                     XCHG   
0371   2A 07 10               LHLD   LOPVAR   ;PUT IT BACK
0374   73                     MOV   M,E   
0375   23                     INX   H   
0376   72                     MOV   M,D   
0377   2A 0B 10               LHLD   LOPLMT   ;HL->LIMIT
037A   F1                     POP   PSW   ;OLD HL
037B   B7                     ORA   A   
037C   F2 80 03               JP   NX1   ;STEP > 0
037F   EB                     XCHG   ;STEP < 0
0380   CD 76 05     NX1:      CALL   CKHLDE   ;COMPARE WITH LIMIT
0383   D1                     POP   D   ;RESTORE TEXT POINTER
0384   DA 92 03               JC   NX2   ;OUTSIDE LIMIT
0387   2A 0D 10               LHLD   LOPLN   ;WITHIN LIMIT, GO
038A   22 01 10               SHLD   CURRNT   ;BACK TO THE SAVED
038D   2A 0F 10               LHLD   LOPPT   ;'CURRNT' AND TEXT
0390   EB                     XCHG   ;POINTER
0391   F7                     RST   6   
0392   CD D5 06     NX2:      CALL   POPA   ;PURGE THIS LOOP
0395   F7                     RST   6   
0396                          ; 
0396                          ;*************************************************************
0396                          ;*
0396                          ;* *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0396                          ;*
0396                          ;* 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0396                          ;* TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0396                          ;*
0396                          ;* 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0396                          ;* COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0396                          ;* NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0396                          ;* EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0396                          ;* EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0396                          ;* EXECUTION CONTINUES AT THE NEXT LINE.
0396                          ;*
0396                          ;* 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0396                          ;* BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0396                          ;* DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0396                          ;* IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0396                          ;* PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0396                          ;* EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0396                          ;* VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0396                          ;* (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0396                          ;* PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0396                          ;* AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0396                          ;*
0396                          ;* IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0396                          ;* "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0396                          ;* THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0396                          ;* THIS IS HANDLED IN 'INPERR'.
0396                          ;*
0396                          ;* 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0396                          ;* EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0396                          ;* TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0396                          ;* TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0396                          ;* THIS IS DONE BY 'DEFLT'.
0396                          ;*
0396   21 00 00     REM:      LXI   H,0   ;*** REM ***
0399   3E                     DB   3EH   ;THIS IS LIKE 'IF 0'
039A                          ; 
039A   DF           IFF:      RST   3   ;*** IF ***
039B   7C                     MOV   A,H   ;IS THE EXPR.=0?
039C   B5                     ORA   L   
039D   C2 49 02               JNZ   RUNSML   ;NO, CONTINUE
03A0   CD 32 06               CALL   FNDSKP   ;YES, SKIP REST OF LINE
03A3   D2 42 02               JNC   RUNTSL   ;AND RUN THE NEXT LINE
03A6   C7                     RST   0   ;IF NO NEXT, RE-START
03A7                          ; 
03A7   2A 05 10     INPERR:   LHLD   STKINP   ;*** INPERR ***
03AA   F9                     SPHL   ;RESTORE OLD SP
03AB   E1                     POP   H   ;AND OLD 'CURRNT'
03AC   22 01 10               SHLD   CURRNT   
03AF   D1                     POP   D   ;AND OLD TEXT POINTER
03B0   D1                     POP   D   
03B1                          ; 
03B1                INPUT:    EQU   $   
03B1   D5           IP1:      PUSH   D   ;SAVE IN CASE OF ERROR
03B2   CD 48 06               CALL   QTSTG   ;IS NEXT ITEM A STRING?
03B5   C3 BF 03               JMP   IP2   ;NO
03B8   FF                     RST   7   ;YES, BUT FOLLOWED BY A
03B9   DA F9 03               JC   IP4   ;VARIABLE?   NO.
03BC   C3 CF 03               JMP   IP3   ;YES.  INPUT VARIABLE
03BF   D5           IP2:      PUSH   D   ;SAVE FOR 'PRTSTG'
03C0   FF                     RST   7   ;MUST BE VARIABLE NOW
03C1   DA A4 05               JC   QWHAT   ;"WHAT?" IT IS NOT?
03C4   1A                     LDAX   D   ;GET READY FOR 'PRTSTR'
03C5   4F                     MOV   C,A   
03C6   97                     SUB   A   
03C7   12                     STAX   D   
03C8   D1                     POP   D   
03C9   CD 3C 06               CALL   PRTSTG   ;PRINT STRING AS PROMPT
03CC   79                     MOV   A,C   ;RESTORE TEXT
03CD   1B                     DCX   D   
03CE   12                     STAX   D   
03CF   D5           IP3:      PUSH   D   ;SAVE IN CASE OF ERROR
03D0   EB                     XCHG   
03D1   2A 01 10               LHLD   CURRNT   ;ALSO SAVE 'CURRNT'
03D4   E5                     PUSH   H   
03D5   21 B1 03               LXI   H,IP1   ;A NEGATIVE NUMBER
03D8   22 01 10               SHLD   CURRNT   ;AS A FLAG
03DB   21 00 00               LXI   H,0   ;SAVE SP TOO
03DE   39                     DAD   SP   
03DF   22 05 10               SHLD   STKINP   
03E2   D5                     PUSH   D   ;OLD HL
03E3   3E 3A                  MVI   A,':'   ;PRINT THIS TOO
03E5   CD D6 05               CALL   GETLN   ;AND GET A LINE
03E8   11 37 13               LXI   D,BUFFER   ;POINTS TO BUFFER
03EB   DF                     RST   3   ;EVALUATE INPUT
03EC   00                     NOP   ;CAN BE 'CALL ENDCHK'
03ED   00                     NOP   
03EE   00                     NOP   
03EF   D1                     POP   D   ;OK, GET OLD HL
03F0   EB                     XCHG   
03F1   73                     MOV   M,E   ;SAVE VALUE IN VAR.
03F2   23                     INX   H   
03F3   72                     MOV   M,D   
03F4   E1                     POP   H   ;GET OLD 'CURRNT'
03F5   22 01 10               SHLD   CURRNT   
03F8   D1                     POP   D   ;AND OLD TEXT POINTER
03F9   F1           IP4:      POP   PSW   ;PURGE JUNK IN STACK
03FA   CF                     RST   1   ;IS NEXT CH. ','?
03FB   2C                     DB   ","   
03FC   03                     DB   IP5-$-1   
03FD   C3 B1 03               JMP   IP1   ;YES, MORE ITEMS.
0400   F7           IP5:      RST   6   
0401                          ; 
0401   1A           DEFLT:    LDAX   D   ;***  DEFLT ***
0402   FE 0D                  CPI   CR   ;EMPTY LINE IS OK
0404   CA 10 04               JZ   LT1   ;ELSE IT IS 'LET'
0407                          ; 
0407   CD 7E 05     LET:      CALL   SETVAL   ;*** LET ***
040A   CF                     RST   1   ;SET VALUE TO VAR.
040B   2C                     DB   ","   
040C   03                     DB   LT1-$-1   
040D   C3 07 04               JMP   LET   ;ITEM BY ITEM
0410   F7           LT1:      RST   6   ;UNTIL FINISH
0411                          ; 
0411                          ;*************************************************************
0411                          ;*
0411                          ;* *** EXPR ***
0411                          ;*
0411                          ;* 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0411                          ;* <EXPR>::<EXPR2>
0411                          ;*         <EXPR2><REL.OP.><EXPR2>
0411                          ;* WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0411                          ;* RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0411                          ;* <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0411                          ;* WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0411                          ;* <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0411                          ;* <EXPR4>::=<VARIABLE>
0411                          ;*           <FUNCTION>
0411                          ;*           (<EXPR>)
0411                          ;* <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0411                          ;* AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0411                          ;* <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0411                          ;*
0411                          ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
0411                          ;       PUSH H                          ;SAVE <EXPR2> VALUE
0411   21 DE 01     EXPR1:    LXI   H,TAB8-1   ;LOOKUP REL.OP.
0414   C3 F8 01               JMP   EXEC   ;GO DO IT
0417   CD 40 04     XP11:     CALL   XP18   ;REL.OP.">="
041A   D8                     RC   ;NO, RETURN HL=0
041B   6F                     MOV   L,A   ;YES, RETURN HL=1
041C   C9                     RET   
041D   CD 40 04     XP12:     CALL   XP18   ;REL.OP."#"
0420   C8                     RZ   ;FALSE, RETURN HL=0
0421   6F                     MOV   L,A   ;TRUE, RETURN HL=1
0422   C9                     RET   
0423   CD 40 04     XP13:     CALL   XP18   ;REL.OP.">"
0426   C8                     RZ   ;FALSE
0427   D8                     RC   ;ALSO FALSE, HL=0
0428   6F                     MOV   L,A   ;TRUE, HL=1
0429   C9                     RET   
042A   CD 40 04     XP14:     CALL   XP18   ;REL.OP."<="
042D   6F                     MOV   L,A   ;SET HL=1
042E   C8                     RZ   ;REL. TRUE, RETURN
042F   D8                     RC   
0430   6C                     MOV   L,H   ;ELSE SET HL=0
0431   C9                     RET   
0432   CD 40 04     XP15:     CALL   XP18   ;REL.OP."="
0435   C0                     RNZ   ;FALSE, RETURN HL=0
0436   6F                     MOV   L,A   ;ELSE SET HL=1
0437   C9                     RET   
0438   CD 40 04     XP16:     CALL   XP18   ;REL.OP."<"
043B   D0                     RNC   ;FALSE, RETURN HL=0
043C   6F                     MOV   L,A   ;ELSE SET HL=1
043D   C9                     RET   
043E   E1           XP17:     POP   H   ;NOT .REL.OP
043F   C9                     RET   ;RETURN HL=<EXPR2>
0440   79           XP18:     MOV   A,C   ;SUBROUTINE FOR ALL
0441   E1                     POP   H   ;REL.OP.'S
0442   C1                     POP   B   
0443   E5                     PUSH   H   ;REVERSE TOP OF STACK
0444   C5                     PUSH   B   
0445   4F                     MOV   C,A   
0446   CD 55 04               CALL   EXPR2   ;GET 2ND <EXPR2>
0449   EB                     XCHG   ;VALUE IN DE NOW
044A   E3                     XTHL   ;1ST <EXPR2> IN HL
044B   CD 76 05               CALL   CKHLDE   ;COMPARE 1ST WITH 2ND
044E   D1                     POP   D   ;RESTORE TEXT POINTER
044F   21 00 00               LXI   H,0   ;SET HL=0, A=1
0452   3E 01                  MVI   A,1   
0454   C9                     RET   
0455                          ; 
0455   CF           EXPR2:    RST   1   ;NEGATIVE SIGN?
0456   2D                     DB   '-'   
0457   06                     DB   XP21-$-1   
0458   21 00 00               LXI   H,0   ;YES, FAKE '0-'
045B   C3 7F 04               JMP   XP26   ;TREAT LIKE SUBTRACT
045E   CF           XP21:     RST   1   ;POSITIVE SIGN? IGNORE
045F   2B                     DB   '+'   
0460   00                     DB   XP22-$-1   
0461   CD 89 04     XP22:     CALL   EXPR3   ;1ST <EXPR3>
0464   CF           XP23:     RST   1   ;ADD?
0465   2B                     DB   '+'   
0466   15                     DB   XP25-$-1   
0467   E5                     PUSH   H   ;YES, SAVE VALUE
0468   CD 89 04               CALL   EXPR3   ;GET 2ND <EXPR3>
046B   EB           XP24:     XCHG   ;2ND IN DE
046C   E3                     XTHL   ;1ST IN HL
046D   7C                     MOV   A,H   ;COMPARE SIGN
046E   AA                     XRA   D   
046F   7A                     MOV   A,D   
0470   19                     DAD   D   
0471   D1                     POP   D   ;RESTORE TEXT POINTER
0472   FA 64 04               JM   XP23   ;1ST AND 2ND SIGN DIFFER
0475   AC                     XRA   H   ;1ST AND 2ND SIGN EQUAL
0476   F2 64 04               JP   XP23   ;SO IS RESULT
0479   C3 9F 00               JMP   QHOW   ;ELSE WE HAVE OVERFLOW
047C   CF           XP25:     RST   1   ;SUBTRACT?
047D   2D                     DB   '-'   
047E   83                     DB   XP42-$-1   
047F   E5           XP26:     PUSH   H   ;YES, SAVE 1ST <EXPR3>
0480   CD 89 04               CALL   EXPR3   ;GET 2ND <EXPR3>
0483   CD 6A 05               CALL   CHGSGN   ;NEGATE
0486   C3 6B 04               JMP   XP24   ;AND ADD THEM
0489                          ; 
0489   CD E6 04     EXPR3:    CALL   EXPR4   ;GET 1ST <EXPR4>
048C   CF           XP31:     RST   1   ;MULTIPLY?
048D   2A                     DB   '*'   
048E   2C                     DB   XP34-$-1   
048F   E5                     PUSH   H   ;YES, SAVE 1ST
0490   CD E6 04               CALL   EXPR4   ;AND GET 2ND <EXPR4>
0493   06 00                  MVI   B,0   ;CLEAR B FOR SIGN
0495   CD 67 05               CALL   CHKSGN   ;CHECK SIGN
0498   EB                     XCHG   ;2ND IN DE NOW
0499   E3                     XTHL   ;1ST IN HL
049A   CD 67 05               CALL   CHKSGN   ;CHECK SIGN OF 1ST
049D   7C                     MOV   A,H   ;IS HL > 255 ?
049E   B7                     ORA   A   
049F   CA A8 04               JZ   XP32   ;NO
04A2   7A                     MOV   A,D   ;YES, HOW ABOUT DE
04A3   B2                     ORA   D   
04A4   EB                     XCHG   ;PUT SMALLER IN HL
04A5   C2 A0 00               JNZ   AHOW   ;ALSO >, WILL OVERFLOW
04A8   7D           XP32:     MOV   A,L   ;THIS IS DUMB
04A9   21 00 00               LXI   H,0   ;CLEAR RESULT
04AC   B7                     ORA   A   ;ADD AND COUNT
04AD   CA D8 04               JZ   XP35   
04B0   19           XP33:     DAD   D   
04B1   DA A0 00               JC   AHOW   ;OVERFLOW
04B4   3D                     DCR   A   
04B5   C2 B0 04               JNZ   XP33   
04B8   C3 D8 04               JMP   XP35   ;FINISHED
04BB   CF           XP34:     RST   1   ;DIVIDE?
04BC   2F                     DB   '/'   
04BD   44                     DB   XP42-$-1   
04BE   E5                     PUSH   H   ;YES, SAVE 1ST <EXPR4>
04BF   CD E6 04               CALL   EXPR4   ;AND GET THE SECOND ONE
04C2   06 00                  MVI   B,0   ;CLEAR B FOR SIGN
04C4   CD 67 05               CALL   CHKSGN   ;CHECK SIGN OF 2ND
04C7   EB                     XCHG   ;PUT 2ND IN DE
04C8   E3                     XTHL   ;GET 1ST IN HL
04C9   CD 67 05               CALL   CHKSGN   ;CHECK SIGN OF 1ST
04CC   7A                     MOV   A,D   ;DIVIDE BY 0?
04CD   B3                     ORA   E   
04CE   CA A0 00               JZ   AHOW   ;SAY "HOW?"
04D1   C5                     PUSH   B   ;ELSE SAVE SIGN
04D2   CD 4A 05               CALL   DIVIDE   ;USE SUBROUTINE
04D5   60                     MOV   H,B   ;RESULT IN HL NOW
04D6   69                     MOV   L,C   
04D7   C1                     POP   B   ;GET SIGN BACK
04D8   D1           XP35:     POP   D   ;AND TEXT POINTER
04D9   7C                     MOV   A,H   ;HL MUST BE +
04DA   B7                     ORA   A   
04DB   FA 9F 00               JM   QHOW   ;ELSE IT IS OVERFLOW
04DE   78                     MOV   A,B   
04DF   B7                     ORA   A   
04E0   FC 6A 05               CM   CHGSGN   ;CHANGE SIGN IF NEEDED
04E3   C3 8C 04               JMP   XP31   ;LOOK FOR MORE TERMS
04E6                          ; 
04E6   21 A0 01     EXPR4:    LXI   H,TAB4-1   ;FIND FUNCTION IN TAB4
04E9   C3 F8 01               JMP   EXEC   ;AND GO DO IT
04EC   FF           XP40:     RST   7   ;NO, NOT A FUNCTION
04ED   DA F5 04               JC   XP41   ;NOR A VARIABLE
04F0   7E                     MOV   A,M   ;VARIABLE
04F1   23                     INX   H   
04F2   66                     MOV   H,M   ;VALUE IN HL
04F3   6F                     MOV   L,A   
04F4   C9                     RET   
04F5   CD 77 00     XP41:     CALL   TSTNUM   ;OR IS IT A NUMBER
04F8   78                     MOV   A,B   ;# OF DIGIT
04F9   B7                     ORA   A   
04FA   C0                     RNZ   ;OK
04FB   CF           PARN:     RST   1   
04FC   28                     DB   '('   
04FD   05                     DB   XP43-$-1   
04FE   DF                     RST   3   ;"(EXPR)"
04FF   CF                     RST   1   
0500   29                     DB   ')'   
0501   01                     DB   XP43-$-1   
0502   C9           XP42:     RET   
0503   C3 A4 05     XP43:     JMP   QWHAT   ;ELSE SAY: "WHAT?"
0506                          ; 
0506   CD FB 04     RND:      CALL   PARN   ;*** RND(EXPR) ***
0509   7C                     MOV   A,H   ;EXPR MUST BE +
050A   B7                     ORA   A   
050B   FA 9F 00               JM   QHOW   
050E   B5                     ORA   L   ;AND NON-ZERO
050F   CA 9F 00               JZ   QHOW   
0512   D5                     PUSH   D   ;SAVE BOTH
0513   E5                     PUSH   H   
0514   2A 11 10               LHLD   RANPNT   ;GET MEMORY AS RANDOM
0517   11 FF 07               LXI   D,LSTROM   ;NUMBER
051A   E7                     RST   4   
051B   DA 21 05               JC   RA1   ;WRAP AROUND IF LAST
051E   21 00 00               LXI   H,START   
0521   5E           RA1:      MOV   E,M   
0522   23                     INX   H   
0523   56                     MOV   D,M   
0524   22 11 10               SHLD   RANPNT   
0527   E1                     POP   H   
0528   EB                     XCHG   
0529   C5                     PUSH   B   
052A   CD 4A 05               CALL   DIVIDE   ;RND(N)=MOD(M,N)+1
052D   C1                     POP   B   
052E   D1                     POP   D   
052F   23                     INX   H   
0530   C9                     RET   
0531                          ; 
0531   CD FB 04     ABS:      CALL   PARN   ;*** ABS(EXPR) ***
0534   CD 67 05               CALL   CHKSGN   ;CHECK SIGN
0537   7C                     MOV   A,H   ;NOTE THAT -32768
0538   B4                     ORA   H   ;CANNOT CHANGE SIGN
0539   FA 9F 00               JM   QHOW   ;SO SAY: "HOW?"
053C   C9                     RET   
053D                          ; 
053D   2A 13 10     SIZE:     LHLD   TXTUNF   ;*** SIZE ***
0540   D5                     PUSH   D   ;GET THE NUMBER OF FREE
0541   EB                     XCHG   ;BYTES BETWEEN 'TXTUNF'
0542   21 00 13               LXI   H,VARBGN   ;AND 'VARBGN'
0545   CD 60 05               CALL   SUBDE   
0548   D1                     POP   D   
0549   C9                     RET   
054A                          ; 
054A                          ;*************************************************************
054A                          ;*
054A                          ;* *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
054A                          ;*
054A                          ;* 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
054A                          ;*
054A                          ;* 'SUBDE' SUBSTRACTS DE FROM HL
054A                          ;*
054A                          ;* 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
054A                          ;* SIGN AND FLIP SIGN OF B.
054A                          ;*
054A                          ;* 'CHGSGN' CHANGES SIGN OF HL AND B UNCONDITIONALLY.
054A                          ;*
054A                          ;* 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
054A                          ;* ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
054A                          ;* CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
054A                          ;*
054A   E5           DIVIDE:   PUSH   H   ;*** DIVIDE ***
054B   6C                     MOV   L,H   ;DIVIDE H BY DE
054C   26 00                  MVI   H,0   
054E   CD 55 05               CALL   DV1   
0551   41                     MOV   B,C   ;SAVE RESULT IN B
0552   7D                     MOV   A,L   ;(REMINDER+L)/DE
0553   E1                     POP   H   
0554   67                     MOV   H,A   
0555   0E FF        DV1:      MVI   C,-1   ;RESULT IN C
0557   0C           DV2:      INR   C   ;DUMB ROUTINE
0558   CD 60 05               CALL   SUBDE   ;DIVIDE BY SUBTRACT
055B   D2 57 05               JNC   DV2   ;AND COUNT
055E   19                     DAD   D   
055F   C9                     RET   
0560                          ; 
0560   7D           SUBDE:    MOV   A,L   ;*** SUBDE ***
0561   93                     SUB   E   ;SUBSTRACT DE FROM
0562   6F                     MOV   L,A   ;HL
0563   7C                     MOV   A,H   
0564   9A                     SBB   D   
0565   67                     MOV   H,A   
0566   C9                     RET   
0567                          ; 
0567   7C           CHKSGN:   MOV   A,H   ;*** CHKSGN ***
0568   B7                     ORA   A   ;CHECK SIGN OF HL
0569   F0                     RP   ;IF -, CHANGE SIGN
056A                          ; 
056A   7C           CHGSGN:   MOV   A,H   ;*** CHGSGN ***
056B   2F                     CMA   ;CHANGE SIGN OF HL
056C   67                     MOV   H,A   
056D   7D                     MOV   A,L   
056E   2F                     CMA   
056F   6F                     MOV   L,A   
0570   23                     INX   H   
0571   78                     MOV   A,B   ;AND ALSO FLIP B
0572   EE 80                  XRI   80H   
0574   47                     MOV   B,A   
0575   C9                     RET   
0576                          ; 
0576   7C           CKHLDE:   MOV   A,H   
0577   AA                     XRA   D   ;SAME SIGN?
0578   F2 7C 05               JP   CK1   ;YES, COMPARE
057B   EB                     XCHG   ;NO, XCH AND COMP
057C   E7           CK1:      RST   4   
057D   C9                     RET   
057E                          ; 
057E                          ;*************************************************************
057E                          ;*
057E                          ;* *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
057E                          ;*
057E                          ;* "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
057E                          ;* THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
057E                          ;* TO THAT VALUE.
057E                          ;*
057E                          ;* "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH "§",
057E                          ;* EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
057E                          ;* NEXT LINE AND CONTINUE FROM THERE.
057E                          ;*
057E                          ;* "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
057E                          ;* REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
057E                          ;*
057E                          ;* "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
057E                          ;* IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
057E                          ;* INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
057E                          ;* OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
057E                          ;* AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
057E                          ;* (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
057E                          ;* PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
057E                          ;* COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
057E                          ;* NOT TERMINATED BUT CONTINUED AT 'INPERR'.
057E                          ;*
057E                          ;* RELATED TO 'ERROR' ARE THE FOLLOWING:
057E                          ;* 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
057E                          ;* 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
057E                          ;* 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
057E                          ;* 'QHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
057E                          ;*
057E   FF           SETVAL:   RST   7   ;*** SETVAL ***
057F   DA A4 05               JC   QWHAT   ;"WHAT?" NO VARIABLE
0582   E5                     PUSH   H   ;SAVE ADDRESS OF VAR.
0583   CF                     RST   1   ;PASS "=" SIGN
0584   3D                     DB   '='   
0585   08                     DB   SV1-$-1   
0586   DF                     RST   3   ;EVALUATE EXPR.
0587   44                     MOV   B,H   ;VALUE IS IN BC NOW
0588   4D                     MOV   C,L   
0589   E1                     POP   H   ;GET ADDRESS
058A   71                     MOV   M,C   ;SAVE VALUE
058B   23                     INX   H   
058C   70                     MOV   M,B   
058D   C9                     RET   
058E   C3 A4 05     SV1:      JMP   QWHAT   ;NO "=" SIGN
0591                          ; 
0591   CF           FIN:      RST   1   ;*** FIN ***
0592   3B                     DB   ";"   
0593   04                     DB   FI1-$-1   
0594   F1                     POP   PSW   ;";", PURGE RET. ADDR.
0595   C3 49 02               JMP   RUNSML   ;CONTINUE SAME LINE
0598   CF           FI1:      RST   1   ;NOT ";", IS IT CR?
0599   0D                     DB   CR   
059A   04                     DB   FI2-$-1   
059B   F1                     POP   PSW   ;YES, PURGE RET. ADDR.
059C   C3 39 02               JMP   RUNNXL   ;RUN NEXT LINE
059F   C9           FI2:      RET   ;ELSE RETURN TO CALLER
05A0                          ; 
05A0   EF           ENDCHK:   RST   5   ;*** ENDCHK ***
05A1   FE 0D                  CPI   CR   ;END WITH CR?
05A3   C8                     RZ   ;OK, ELSE SAY: "WHAT?"
05A4                          ; 
05A4   D5           QWHAT:    PUSH   D   ;*** QWHAT ***
05A5   11 AE 00     AWHAT:    LXI   D,WHAT   ;*** AWHAT ***
05A8   97           ERROR:    SUB   A   ;*** ERROR ***
05A9   CD 3C 06               CALL   PRTSTG   ;PRINT 'WHAT?', 'HOW?'
05AC   D1                     POP   D   ;OR 'SORRY'
05AD   1A                     LDAX   D   ;SAVE THE CHARACTER
05AE   F5                     PUSH   PSW   ;AT WHERE OLD DE ->
05AF   97                     SUB   A   ;AND PUT A 0 THERE
05B0   12                     STAX   D   
05B1   2A 01 10               LHLD   CURRNT   ;GET CURRENT LINE #
05B4   E5                     PUSH   H   
05B5   7E                     MOV   A,M   ;CHECK THE VALUE
05B6   23                     INX   H   
05B7   B6                     ORA   M   
05B8   D1                     POP   D   
05B9   CA 00 00               JZ   START   ;IF ZERO, JUST RESTART
05BC   7E                     MOV   A,M   ;IF NEGATIVE,
05BD   B7                     ORA   A   
05BE   FA A7 03               JM   INPERR   ;REDO INPUT
05C1   CD AA 06               CALL   PRTLN   ;ELSE PRINT THE LINE
05C4   1B                     DCX   D   ;UPTO WHERE THE 0 IS
05C5   F1                     POP   PSW   ;RESTORE THE CHARACTER
05C6   12                     STAX   D   
05C7   3E 3F                  MVI   A,'?'   ;PRINT A "?"
05C9   D7                     RST   2   
05CA   97                     SUB   A   ;AND THE REST OF THE
05CB   CD 3C 06               CALL   PRTSTG   ;LINE
05CE   C7                     RST   0   ;THEN RESTART
05CF                          ; 
05CF   D5           QSORRY:   PUSH   D   ;*** QSORRY ***
05D0   11 B4 00     ASORRY:   LXI   D,SORRY   ;*** ASORRY ***
05D3   C3 A8 05               JMP   ERROR   
05D6                          ; 
05D6                          ;*************************************************************
05D6                          ;*
05D6                          ;* *** GETLN *** FNDLN (& FRIENDS) ***
05D6                          ;*
05D6                          ;* 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
05D6                          ;* THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
05D6                          ;* THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
05D6                          ;* ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
05D6                          ;* THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
05D6                          ;* CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
05D6                          ;* CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
05D6                          ;*
05D6                          ;* 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
05D6                          ;* TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
05D6                          ;* LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
05D6                          ;* (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
05D6                          ;* IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
05D6                          ;* IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
05D6                          ;* WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
05D6                          ;* LINE, FLAGS ARE C & NZ.
05D6                          ;* 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
05D6                          ;* AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
05D6                          ;* ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
05D6                          ;* 'FDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
05D6                          ;* 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
05D6                          ;* 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
05D6                          ;*
05D6   D7           GETLN:    RST   2   ;*** GETLN ***
05D7   11 37 13               LXI   D,BUFFER   ;PROMPT AND INIT.
05DA   CD 32 07     GL1:      CALL   CHKIO   ;CHECK KEYBOARD
05DD   CA DA 05               JZ   GL1   ;NO INPUT, WAIT
05E0   D7                     RST   2   ;INPUT, ECHO BACK
05E1   FE 0A                  CPI   LF   ;IGNORE LF
05E3   CA DA 05               JZ   GL1   
05E6   B7                     ORA   A   ;IGNORE NULL
05E7   CA DA 05               JZ   GL1   
05EA   FE 7F                  CPI   DEL   ;DELETE LAST CHARACTER?
05EC   CA FF 05               JZ   GL3   ;YES
05EF                          ;       CPI  DLLN                       ;DELETE THE WHOLE LINE?
05EF   FE 15                  CPI   CNTLU   
05F1   CA 0C 06               JZ   GL4   ;YES
05F4   12                     STAX   D   ;ELSE SAVE INPUT
05F5   13                     INX   D   ;AND BUMP POINTER
05F6   FE 0D                  CPI   CR   ;WAS IT CR?
05F8   C8                     RZ   ;YES, END OF LINE
05F9   7B                     MOV   A,E   ;ELSE MORE FREE ROOM?
05FA   FE 7F                  CPI   BUFEND   
05FC   C2 DA 05               JNZ   GL1   ;YES, GET NEXT INPUT
05FF   7B           GL3:      MOV   A,E   ;DELETE LAST CHARACTER
0600   FE 37                  CPI   BUFFER   ;BUT DO WE HAVE ANY?
0602   CA 0C 06               JZ   GL4   ;NO, REDO WHOLE LINE
0605   1B                     DCX   D   ;YES, BACKUP POINTER
0606   3E 5C                  MVI   A,BKS   ;AND ECHO A BACK-SLASH
0608   D7                     RST   2   
0609   C3 DA 05               JMP   GL1   ;GO GET NEXT INPUT
060C   CD 0E 00     GL4:      CALL   CRLF   ;REDO ENTIRE LINE
060F   3E 5E                  MVI   A,UPA   ;CR, LF AND UP-ARROW
0611   C3 D6 05               JMP   GETLN   
0614                          ; 
0614   7C           FNDLN:    MOV   A,H   ;*** FNDLN ***
0615   B7                     ORA   A   ;CHECK SIGN OF HL
0616   FA 9F 00               JM   QHOW   ;IT CANNOT BE -
0619   11 15 10               LXI   D,TXTBGN   ;INIT TEXT POINTER
061C                          ; 
061C                FDLNP:    EQU   $   
061C   E5           FL1:      PUSH   H   ;SAVE LINE #
061D   2A 13 10               LHLD   TXTUNF   ;CHECK IF WE PASSED END
0620   2B                     DCX   H   
0621   E7                     RST   4   
0622   E1                     POP   H   ;GET LINE # BACK
0623   D8                     RC   ;C,NZ PASSED END
0624   1A                     LDAX   D   ;WE DID NOT, GET BYTE 1
0625   95                     SUB   L   ;IS THIS THE LINE?
0626   47                     MOV   B,A   ;COMPARE LOW ORDER
0627   13                     INX   D   
0628   1A                     LDAX   D   ;GET BYTE 2
0629   9C                     SBB   H   ;COMPARE HIGH ORDER
062A   DA 31 06               JC   FL2   ;NO, NOT THERE YET
062D   1B                     DCX   D   ;ELSE WE EITHER FOUND
062E   B0                     ORA   B   ;IT, OR IT IS NOT THERE
062F   C9                     RET   ;NC,Z:FOUND, NC,NZ:NO
0630                          ; 
0630                FNDNXT:   EQU   $   
0630   13                     INX   D   ;FIND NEXT LINE
0631   13           FL2:      INX   D   ;JUST PASSED BYTE 1 & 2
0632                          ; 
0632   1A           FNDSKP:   LDAX   D   ;*** FNDSKP ***
0633   FE 0D                  CPI   CR   ;TRY TO FIND CR
0635   C2 31 06               JNZ   FL2   ;KEEP LOOKING
0638   13                     INX   D   ;FOUND CR, SKIP OVER
0639   C3 1C 06               JMP   FL1   ;CHECK IF END OF TEXT
063C                          ; 
063C                          ;*************************************************************
063C                          ;*
063C                          ;* *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
063C                          ;*
063C                          ;* 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
063C                          ;* AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
063C                          ;* THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
063C                          ;* CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
063C                          ;*
063C                          ;* 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
063C                          ;* QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
063C                          ;* OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
063C                          ;* THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
063C                          ;* AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
063C                          ;* OVER (USUALLY A JUMP INSTRUCTION.
063C                          ;*
063C                          ;* 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
063C                          ;* IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
063C                          ;* HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
063C                          ;* C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
063C                          ;* PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
063C                          ;*
063C                          ;* 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
063C                          ;*
063C   47           PRTSTG:   MOV   B,A   ;*** PRTSTG ***
063D   1A           PS1:      LDAX   D   ;GET A CHARACTER
063E   13                     INX   D   ;BUMP POINTER
063F   B8                     CMP   B   ;SAME AS OLD A?
0640   C8                     RZ   ;YES, RETURN
0641   D7                     RST   2   ;ELSE PRINT IT
0642   FE 0D                  CPI   CR   ;WAS IT A CR?
0644   C2 3D 06               JNZ   PS1   ;NO, NEXT
0647   C9                     RET   ;YES, RETURN
0648                          ; 
0648   CF           QTSTG:    RST   1   ;*** QTSTG ***
0649   22                     DB   0x22   ;'"'
064A   0F                     DB   QT3-$-1   
064B   3E 22                  MVI   A,0x22   ;IT IS A "
064D   CD 3C 06     QT1:      CALL   PRTSTG   ;PRINT UNTIL ANOTHER
0650   FE 0D                  CPI   CR   ;WAS LAST ONE A CR?
0652   E1                     POP   H   ;RETURN ADDRESS
0653   CA 39 02               JZ   RUNNXL   ;WAS CR, RUN NEXT LINE
0656   23           QT2:      INX   H   ;SKIP 3 BYTES ON RETURN
0657   23                     INX   H   
0658   23                     INX   H   
0659   E9                     PCHL   ;RETURN
065A   CF           QT3:      RST   1   ;IS IT A '?
065B   27                     DB   QT   
065C   05                     DB   QT4-$-1   
065D   3E 27                  MVI   A,QT   ;YES, DO THE SAME
065F   C3 4D 06               JMP   QT1   ;AS IN "
0662   CF           QT4:      RST   1   ;IS IT BACK-ARROW?
0663   5F                     DB   BKA   
0664   08                     DB   QT5-$-1   
0665   3E 8D                  MVI   A,8DH   ;YES, CR WITHOUT LF
0667   D7                     RST   2   ;DO IT TWICE TO GIVE
0668   D7                     RST   2   ;TTY ENOUGH TIME
0669   E1                     POP   H   ;RETURN ADDRESS
066A   C3 56 06               JMP   QT2   
066D   C9           QT5:      RET   ;NONE OF ABOVE
066E                          ; 
066E   D5           PRTNUM:   PUSH   D   ;*** PRTNUM ***
066F   11 0A 00               LXI   D,10   ;DECIMAL
0672   D5                     PUSH   D   ;SAVE AS A FLAG
0673   42                     MOV   B,D   ;B=SIGN
0674   0D                     DCR   C   ;C=SPACES
0675   CD 67 05               CALL   CHKSGN   ;CHECK SIGN
0678   F2 7E 06               JP   PN1   ;NO SIGN
067B   06 2D                  MVI   B,'-'   ;B=SIGN
067D   0D                     DCR   C   ;'-' TAKES SPACE
067E   C5           PN1:      PUSH   B   ;SAVE SIGN & SPACE
067F   CD 4A 05     PN2:      CALL   DIVIDE   ;DIVIDE HL BY 10
0682   78                     MOV   A,B   ;RESULT 0?
0683   B1                     ORA   C   
0684   CA 8F 06               JZ   PN3   ;YES, WE GOT ALL
0687   E3                     XTHL   ;NO, SAVE REMAINDER
0688   2D                     DCR   L   ;AND COUNT SPACE
0689   E5                     PUSH   H   ;HL IS OLD BC
068A   60                     MOV   H,B   ;MOVE RESULT TO BC
068B   69                     MOV   L,C   
068C   C3 7F 06               JMP   PN2   ;AND DIVIDE BY 10
068F   C1           PN3:      POP   B   ;WE GOT ALL DIGITS IN
0690   0D           PN4:      DCR   C   ;THE STACK
0691   79                     MOV   A,C   ;LOOK AT SPACE COUNT
0692   B7                     ORA   A   
0693   FA 9C 06               JM   PN5   ;NO LEADING BLANKS
0696   3E 20                  MVI   A,' '   ;LEADING BLANKS
0698   D7                     RST   2   
0699   C3 90 06               JMP   PN4   ;MORE?
069C   78           PN5:      MOV   A,B   ;PRINT SIGN
069D   D7                     RST   2   ;MAYBE - OR NULL
069E   5D                     MOV   E,L   ;LAST REMAINDER IN E
069F   7B           PN6:      MOV   A,E   ;CHECK DIGIT IN E
06A0   FE 0A                  CPI   10   ;10 IS FLAG FOR NO MORE
06A2   D1                     POP   D   
06A3   C8                     RZ   ;IF SO, RETURN
06A4   C6 30                  ADI   '0'   ;ELSE CONVERT TO ASCII
06A6   D7                     RST   2   ;AND PRINT THE DIGIT
06A7   C3 9F 06               JMP   PN6   ;GO BACK FOR MORE
06AA                          ; 
06AA   1A           PRTLN:    LDAX   D   ;*** PRTLN ***
06AB   6F                     MOV   L,A   ;LOW ORDER LINE #
06AC   13                     INX   D   
06AD   1A                     LDAX   D   ;HIGH ORDER
06AE   67                     MOV   H,A   
06AF   13                     INX   D   
06B0   0E 04                  MVI   C,4   ;PRINT 4 DIGIT LINE #
06B2   CD 6E 06               CALL   PRTNUM   
06B5   3E 20                  MVI   A,' '   ;FOLLOWED BY A BLANK
06B7   D7                     RST   2   
06B8   97                     SUB   A   ;AND THEN THE NEXT
06B9   CD 3C 06               CALL   PRTSTG   
06BC   C9                     RET   
06BD                          ; 
06BD                          ;*************************************************************
06BD                          ;*
06BD                          ;* *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
06BD                          ;*
06BD                          ;* 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
06BD                          ;* DE = HL
06BD                          ;*
06BD                          ;* 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
06BD                          ;* UNTIL DE = BC
06BD                          ;*
06BD                          ;* 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
06BD                          ;* STACK
06BD                          ;*
06BD                          ;* 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
06BD                          ;* STACK
06BD                          ;*
06BD   E7           MVUP:     RST   4   ;*** MVUP ***
06BE   C8                     RZ   ;DE = HL, RETURN
06BF   1A                     LDAX   D   ;GET ONE BYTE
06C0   02                     STAX   B   ;MOVE IT
06C1   13                     INX   D   ;INCREASE BOTH POINTERS
06C2   03                     INX   B   
06C3   C3 BD 06               JMP   MVUP   ;UNTIL DONE
06C6                          ; 
06C6   78           MVDOWN:   MOV   A,B   ;*** MVDOWN ***
06C7   92                     SUB   D   ;TEST IF DE = BC
06C8   C2 CE 06               JNZ   MD1   ;NO, GO MOVE
06CB   79                     MOV   A,C   ;MAYBE, OTHER BYTE?
06CC   93                     SUB   E   
06CD   C8                     RZ   ;YES, RETURN
06CE   1B           MD1:      DCX   D   ;ELSE MOVE A BYTE
06CF   2B                     DCX   H   ;BUT FIRST DECREASE
06D0   1A                     LDAX   D   ;BOTH POINTERS AND
06D1   77                     MOV   M,A   ;THEN DO IT
06D2   C3 C6 06               JMP   MVDOWN   ;LOOP BACK
06D5                          ; 
06D5   C1           POPA:     POP   B   ;BC = RETURN ADDR.
06D6   E1                     POP   H   ;RESTORE LOPVAR, BUT
06D7   22 07 10               SHLD   LOPVAR   ;=0 MEANS NO MORE
06DA   7C                     MOV   A,H   
06DB   B5                     ORA   L   
06DC   CA EF 06               JZ   PP1   ;YEP, GO RETURN
06DF   E1                     POP   H   ;NOP, RESTORE OTHERS
06E0   22 09 10               SHLD   LOPINC   
06E3   E1                     POP   H   
06E4   22 0B 10               SHLD   LOPLMT   
06E7   E1                     POP   H   
06E8   22 0D 10               SHLD   LOPLN   
06EB   E1                     POP   H   
06EC   22 0F 10               SHLD   LOPPT   
06EF   C5           PP1:      PUSH   B   ;BC = RETURN ADDR.
06F0   C9                     RET   
06F1                          ; 
06F1   21 A7 13     PUSHA:    LXI   H,STKLMT   ;*** PUSHA ***
06F4   CD 6A 05               CALL   CHGSGN   
06F7   C1                     POP   B   ;BC=RETURN ADDRESS
06F8   39                     DAD   SP   ;IS STACK NEAR THE TOP?
06F9   D2 CF 05               JNC   QSORRY   ;YES, SORRY FOR THAT
06FC   2A 07 10               LHLD   LOPVAR   ;ELSE SAVE LOOP VAR'S
06FF   7C                     MOV   A,H   ;BUT IF LOPVAR IS 0
0700   B5                     ORA   L   ;THAT WILL BE ALL
0701   CA 17 07               JZ   PU1   
0704   2A 0F 10               LHLD   LOPPT   ;ELSE, MORE TO SAVE
0707   E5                     PUSH   H   
0708   2A 0D 10               LHLD   LOPLN   
070B   E5                     PUSH   H   
070C   2A 0B 10               LHLD   LOPLMT   
070F   E5                     PUSH   H   
0710   2A 09 10               LHLD   LOPINC   
0713   E5                     PUSH   H   
0714   2A 07 10               LHLD   LOPVAR   
0717   E5           PU1:      PUSH   H   
0718   C5                     PUSH   B   ;BC = RETURN ADDR.
0719   C9                     RET   
071A                          ; 
071A                          ;*************************************************************
071A                          ;*
071A                          ;* *** OUTC *** & CHKIO ***
071A                          ;*
071A                          ;* THESE ARE THE ONLY I/O ROUTINES IN TBI.
071A                          ;* 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
071A                          ;* 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
071A                          ;* IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
071A                          ;* SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
071A                          ;* ARE RESTORED.
071A                          ;*
071A                          ;* 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
071A                          ;* THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
071A                          ;* IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
071A                          ;* INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
071A                          ;* Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
071A                          ;* RESTART TBI AND DO NOT RETURN TO THE CALLER.
071A                          ;*
071A                          ;OUTC:  PUSH PSW                        ;THIS IS AT LOC. 10
071A                          ;       LDA  OCSW                       ;CHECK SOFTWARE SWITCH
071A                          ;       ORA  A
071A   C2 1F 07     OC2:      JNZ   OC3   ;IT IS ON
071D   F1                     POP   PSW   ;IT IS OFF
071E   C9                     RET   ;RESTORE AF AND RETURN
071F   DB 00        OC3:      IN   0   ;COME HERE TO DO OUTPUT
0721   E6 02                  ANI   02H   ;STATUS BIT
0723   CA 1F 07               JZ   OC3   ;NOT READY, WAIT
0726   F1                     POP   PSW   ;READY, GET OLD A BACK
0727   D3 01                  OUT   1   ;AND SEND IT OUT
0729   FE 0D                  CPI   CR   ;WAS IT CR?
072B   C0                     RNZ   ;NO, FINISHED
072C   3E 0A                  MVI   A,LF   ;YES, WE SEND LF TOO
072E   D7                     RST   2   ;THIS IS RECURSIVE
072F   3E 0D                  MVI   A,CR   ;GET CR BACK IN A
0731   C9                     RET   
0732                          ; 
0732   DB 00        CHKIO:    IN   0   ;*** CHKIO ***
0734   00                     NOP   ;STATUS BIT FLIPPED?
0735   E6 20                  ANI   20H   ;MASK STATUS BIT
0737   C8                     RZ   ;NOT READY, RETURN "Z"
0738   DB 01                  IN   1   ;READY, READ DATA
073A   E6 7F                  ANI   7FH   ;MASK BIT 7 OFF
073C   FE 0F                  CPI   CNTLO   ;IS IT CONTROL-O?
073E   C2 4B 07               JNZ   CI1   ;NO, MORE CHECKING
0741   3A 00 10               LDA   OCSW   ;CONTROL-O FLIPS OCSW
0744   2F                     CMA   ;ON TO OFF, OFF TO ON
0745   32 00 10               STA   OCSW   
0748   C3 32 07               JMP   CHKIO   ;GET ANOTHER INPUT
074B   FE 03        CI1:      CPI   CNTLC   ;IS IT CONTROL-C?
074D   C0                     RNZ   ;NO, RETURN "NZ"
074E   C7                     RST   0   ;YES, RESTART TBI
074F                          ; 
074F   59 4F 55 20 4D 41 59 20 4E 45 45 44 20 54 48 49 53 20 53 50 41 43 45 20 54 4F DB   'YOU MAY NEED THIS SPACE TO'   
0769   50 41 54 43 48 20 55 50 20 54 48 45 20 49 2F 4F 20 52 4F 55 54 49 4E 45 53 2C DB   "PATCH UP THE I/O ROUTINES,"   
0783   54 4F 20 46 49 58 20 55 50 20 42 55 47 53 2C 20 4F 52 20 54 4F 20 41 44 44 DB   "TO FIX UP BUGS, OR TO ADD"   
079C   4D 4F 52 45 20 43 4F 4D 4D 41 4E 44 53 20 41 4E 44 20 46 55 4E 43 54 49 4F 4E 53 2E DB   'MORE COMMANDS AND FUNCTIONS.'   
07B8   53 4B 59 20 28 53 50 41 43 45 29 20 49 53 20 54 48 45 20 4C 49 4D 49 54 2E DB   'SKY (SPACE) IS THE LIMIT.'   
07D1   47 4F 4F 44 20 4C 55 43 4B 20 41 4E 44 20 47 4F 4F 44 20 42 59 45 2E DB   'GOOD LUCK AND GOOD BYE.'   
07E8   4C 49 43 48 45 4E 20 57 41 4E 47 2C 20 31 30 20 4A 55 4E 45 20 37 36 DB   "LICHEN WANG, 10 JUNE 76"   
07FF                          ; 
07FF                LSTROM:   EQU   $   
1000                          .ORG   1000H   ;HERE DOWN MUST BE RAM
1000   FF           OCSW:     DB   0FFH   ;SWITCH FOR OUTPUT
1001   00 00        CURRNT:   DW   0   ;POINTS TO CURRENT LINE
1003   00 00        STKGOS:   DW   0   ;SAVES SP IN 'GOSUB'
1005                VARNXT:   EQU   $   
1005   00 00        STKINP:   DW   0   ;SAVES SP IN 'INPUT'
1007   00 00        LOPVAR:   DW   0   ;'FOR' LOOP SAVE AREA
1009   00 00        LOPINC:   DW   0   ;INCREMENT
100B   00 00        LOPLMT:   DW   0   ;LIMIT
100D   00 00        LOPLN:    DW   0   ;LINE NUMBER
100F   00 00        LOPPT:    DW   0   ;TEXT POINTER
1011   00 00        RANPNT:   DW   START   ;RANDOM NUMBER POINTER
1013   15 10        TXTUNF:   DW   TXTBGN   ;->UNFILLED TEXT AREA
1015                TXTBGN:   DS   1   ;TEXT SAVE AREA BEGINS
1300                          .ORG   1300H   
1300                TXTEND:   EQU   $   
1300                VARBGN:   DS   2*27   ;VARIABLE @(0)
1336                          DS   1   ;EXTRA BYTE FOR BUFFER
1337                BUFFER:   DS   72   ;INPUT BUFFER
137F                BUFEND:   EQU   $   
137F                          DS   40   ;EXTRA BYTES FOR STACK
13A7                STKLMT:   EQU   $   
1400                          .ORG   1400H   
1400                STACK:    EQU   $   
1400                          END   


_PC         1400
CR          000D
LF          000A
QT          0027
CNTLO       000F
CNTLC       0003
DLLN        007D
CNTLU       0015
BKS         005C
BKA         005F
UPA         005E
DEL         007F
START       0000
CRLF        000E
SS1         0028
TV1         0058
TC1         0068
TC2         0073
TSTNUM      0077
TN1         007C
QHOW        009F
AHOW        00A0
HOW         00A6
OK          00AB
WHAT        00AE
SORRY       00B4
ST1         00BA
ST2         00CA
ST3         00D3
ST4         0108
TAB1        012F
TAB2        013F
TAB4        01A1
TAB5        01D1
TAB6        01D7
TAB8        01DF
DIRECT      01F5
EXEC        01F8
EX0         01F8
EX1         01FA
EX2         020D
EX3         0217
EX4         0219
EX5         021E
NEW         0226
STOP        022F
RUN         0233
RUNNXL      0239
RUNTSL      0242
RUNSML      0249
GOTO        0252
LIST        0261
LS1         026A
PRINT       0279
PR2         0284
PR0         028D
PR1         0295
PR3         029B
PR6         02A4
PR8         02A8
GOSUB       02B1
RETURN      02D1
FOR         02EA
FR1         02FA
FR2         0304
FR3         0308
FR4         030B
FR5         030E
FR7         0323
FR8         0344
NEXT        0349
NX0         0350
NX3         0368
NX1         0380
NX2         0392
REM         0396
IFF         039A
INPERR      03A7
INPUT       03B1
IP1         03B1
IP2         03BF
IP3         03CF
IP4         03F9
IP5         0400
DEFLT       0401
LET         0407
LT1         0410
EXPR1       0411
XP11        0417
XP12        041D
XP13        0423
XP14        042A
XP15        0432
XP16        0438
XP17        043E
XP18        0440
EXPR2       0455
XP21        045E
XP22        0461
XP23        0464
XP24        046B
XP25        047C
XP26        047F
EXPR3       0489
XP31        048C
XP32        04A8
XP33        04B0
XP34        04BB
XP35        04D8
EXPR4       04E6
XP40        04EC
XP41        04F5
PARN        04FB
XP42        0502
XP43        0503
RND         0506
RA1         0521
ABS         0531
SIZE        053D
DIVIDE      054A
DV1         0555
DV2         0557
SUBDE       0560
CHKSGN      0567
CHGSGN      056A
CKHLDE      0576
CK1         057C
SETVAL      057E
SV1         058E
FIN         0591
FI1         0598
FI2         059F
ENDCHK      05A0
QWHAT       05A4
AWHAT       05A5
ERROR       05A8
QSORRY      05CF
ASORRY      05D0
GETLN       05D6
GL1         05DA
GL3         05FF
GL4         060C
FNDLN       0614
FDLNP       061C
FL1         061C
FNDNXT      0630
FL2         0631
FNDSKP      0632
PRTSTG      063C
PS1         063D
QTSTG       0648
QT1         064D
QT2         0656
QT3         065A
QT4         0662
QT5         066D
PRTNUM      066E
PN1         067E
PN2         067F
PN3         068F
PN4         0690
PN5         069C
PN6         069F
PRTLN       06AA
MVUP        06BD
MVDOWN      06C6
MD1         06CE
POPA        06D5
PP1         06EF
PUSHA       06F1
PU1         0717
OC2         071A
OC3         071F
CHKIO       0732
CI1         074B
LSTROM      07FF
OCSW        1000
CURRNT      1001
STKGOS      1003
VARNXT      1005
STKINP      1005
LOPVAR      1007
LOPINC      1009
LOPLMT      100B
LOPLN       100D
LOPPT       100F
RANPNT      1011
TXTUNF      1013
TXTBGN      1015
TXTEND      1300
VARBGN      1300
BUFFER      1337
BUFEND      137F
STKLMT      13A7
STACK       1400
